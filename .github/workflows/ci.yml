name: Build and test QDLDL

on: [push, pull_request]

env:
  # The CMake build type
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            coverage: ON
          - os: macos-latest
            coverage: OFF
          - os: windows-latest
            coverage: OFF

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Environment
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --warn-uninitialized -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUNITTESTS=ON -DCOVERAGE=${{ matrix.coverage }} $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE

      - name: Run tests
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: ctest -C $BUILD_TYPE

        # Only parse and upload coverage if it was generated
      - name: Process coverage
        if: ${{ matrix.coverage == 'ON' }}
        uses: imciner2/run-lcov@main
        with:
          input_directory: '${{ runner.workspace }}/build'
          exclude: '"$GITHUB_WORKSPACE/tests/*" "$GITHUB_WORKSPACE/examples/*" "/usr/include/x86_64-linux-gnu/bits/*"'
          output_file: '${{ runner.workspace }}/build/coverage.info'


  test_configs:
    strategy:
      fail-fast: false
      matrix:
        float: [ON, OFF]
        long: [ON, OFF]

    # Only test the build configs on Linux
    runs-on: ubuntu-latest

    name: Config - FLOAT=${{ matrix.float }}, LONG=${{ matrix.long }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Environment
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --warn-uninitialized -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDFLOAT=${{ matrix.float }} -DDLONG=${{ matrix.long }} -DUNITTESTS=ON -DCOVERAGE=ON $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE

      - name: Run tests
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: ctest -C $BUILD_TYPE
